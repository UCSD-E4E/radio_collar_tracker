/**
 * This program is intended to process the csv files generated by both the 
 * spectrumAnalysis and finalAnalysis programs to postively identify the radio
 * collars based on the signal to noise ratio within the frequencies that the
 * collars should be in compared to the noise floor generated by the addNoiseCh
 * program.
 *
 * @author Nathan Hui
 * @version 0.1
 * @date Jan 29 2015
 */

//////////////
// Includes //
//////////////
#include <iostream>
#include <fstream>
#include <forward_list>
#include <cstdlib>
#include <sstream>
#include <array>
using namespace std;

//////////////////////
// Global Variables //
//////////////////////
enum runField{
	LAT = 0,
	LON = 1,
	ALT = 2,
	COL_BASE = 3
};

/////////////////////////
// Function Prototypes //
/////////////////////////
void printHelp();

//////////////////////////
// Function Definitions //
//////////////////////////
void printHelp(){
	cout << "Usage: spectraCollarID NUM_COLLARS RUN_FILE META_FILE\n";
	cout << "\n";
	cout << "spectraCollarID is a program that analyzes the CSV output files from\n";
	cout <<"the spectrumAnalysis and finalAnalysis program in order to positively\n";
	cout <<"identify collars based on their signal to noise ratio.\n";
}
int main(int argc, char** argv){
	if(argc != 4){
		cout << "Missing argument(s)!" << endl;
		printHelp();
		return 1;
	}
	
	int num_collars = strtol(argv[1], NULL, 10);
	if(num_collars == 0){
		cout << "Bad NUM_COLLARS!" << endl;
		printHelp();
		return 1;
	}
	
	ifstream run_file (argv[2], ifstream::in);
	if(!run_file.is_open()){
		cout << "Bad run file!" << endl;
		printHelp();
		return 1;
	}

	ifstream meta_file (argv[3], ifstream::in);
	if(!meta_file.is_open()){
		cout << "Bad run file!" << endl;
		printHelp();
		return 1;
	}

	// Import and process run_file CSV as int arrays
	string line;
	int64_t max_noise = INT64_MIN;
	int64_t *avg_SNR = new int64_t[num_collars];
	for(int i = 0; i < num_collars; i++){
		avg_SNR[i] = INT64_MIN;
	}
	int sampleCount = 0;
	while(getline(run_file, line) && run_file.good()){
		stringstream line_stream (line, ios_base::in);
		int64_t* array = new int64_t[3 + num_collars + 1];
		string buf;
		for(int i = 0; i < 4 + num_collars; i++){
			getline(line_stream, buf, ',');
			array[i] = stoi(buf);
		}
		if(array[3 + num_collars] > max_noise){
			max_noise = array[3 + num_collars];
		}
		for(int i = 0; i < num_collars; i++){
			if(array[3 + i] > avg_SNR[i]){
				avg_SNR[i] = array[3 + i];
			}
		}
	}

	// Import meta_file CSV
	double collar_bounds[2][2];
	getline(meta_file, line);
	if(!meta_file.good()){
		cout << "Bad meta file!" << endl;
		printHelp();
		return 1;
	}
	stringstream bounds_box_stream (line, ios_base::in);
	string buf;
	getline(bounds_box_stream, buf, ',');
	collar_bounds[0][1] = stoi(buf) / 10000000.0;
	getline(bounds_box_stream, buf, ',');
	collar_bounds[1][1] = stoi(buf) / 10000000.0;
	getline(bounds_box_stream, buf, ',');
	collar_bounds[0][0] = stoi(buf) / 10000000.0;
	getline(bounds_box_stream, buf);
	collar_bounds[1][0] = stoi(buf) / 10000000.0;

	double collars[num_collars][3];
	for(int i = 0; i < num_collars; i++){
		getline(meta_file, line);
		if(!meta_file.good()){
			cout << "Bad meta file!" << endl;
			printHelp();
			return 1;
		}
		stringstream collar_target (line, ios_base::in);
		getline(collar_target, buf, ',');
		collars[i][1] = stoi(buf) / 10000000.0;
		getline(collar_target, buf, ',');
		collars[i][0] = stoi(buf) / 10000000.0;
		getline(collar_target, buf);
		collars[i][2] = stod(buf);
	}

	// print output
	cout.precision(8);
	cout << "Bounding coordinates: " << collar_bounds[0][0] << ", " 
			<< collar_bounds[0][1] << endl;
	cout << "                      " << collar_bounds[1][0] << ", "
			<< collar_bounds[1][1] << endl;
	cout << endl;
	cout << "Positively ID'd collars:" << endl;
	for(int i = 0; i < num_collars; i++){
		if(avg_SNR[i] > max_noise){
			cout << "Collar " << i + 1 << " at " << collars[i][0] << ", "
					<< collars [i][1] << " within " << collars[i][2]
					<< " meters" << endl;
		}
	}

	return 0;
}

